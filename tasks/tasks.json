{
  "tasks": [
    {
      "id": "7ab8913d-ba85-4285-a033-b18bd5a4ccf3",
      "name": "Backend: Setup Project Structure (ES Modules)",
      "description": "Initialize backend folder structure, configure Node.js for ES Modules, setup package.json, and ensure all scripts use ESM. Add note: This project uses ES Modules, not CommonJS.",
      "notes": "This is using ES Module not commonJS.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-06-19T11:06:10.111Z",
      "updatedAt": "2025-06-19T11:06:10.111Z",
      "relatedFiles": [
        {
          "path": "backend/package.json",
          "type": "TO_MODIFY",
          "description": "Set type: module and update scripts for ESM."
        }
      ],
      "implementationGuide": "- Create src/ with config, controllers, middleware, models, routes, services, utils, validations\n- Set \"type\": \"module\" in package.json\n- Update scripts to use ESM\n- Add .env.example\n- Add note: ES Modules only\n- Verify with a sample import/export.",
      "verificationCriteria": "Backend runs with ESM imports/exports, no require() used."
    },
    {
      "id": "e209d313-88e5-41fe-9041-f750acae4bbc",
      "name": "Backend: User Model & Auth (ES Modules)",
      "description": "Implement User model, registration, login, JWT auth, password hashing, and profile endpoints. Add note: This is using ES Module not commonJS. Depends on backend project structure.",
      "notes": "This is using ES Module not commonJS.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7ab8913d-ba85-4285-a033-b18bd5a4ccf3"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.111Z",
      "updatedAt": "2025-06-19T11:07:05.930Z",
      "relatedFiles": [
        {
          "path": "backend/src/models/User.ts",
          "type": "CREATE",
          "description": "User model (Mongoose, ESM)"
        }
      ],
      "implementationGuide": "- Create User model (Mongoose, ESM)\n- Auth routes: register, login, get current user, update profile\n- Use bcryptjs, JWT, Joi\n- Add tests for all endpoints\n- Add note: ES Modules only\n- Security: hash passwords, validate input, rate limit, sanitize, helmet, CORS\n- Error handling middleware.",
      "verificationCriteria": "All auth endpoints work, tests pass, ESM only."
    },
    {
      "id": "68d1c8fd-70f3-4b08-8a4c-8272c8c561d3",
      "name": "Backend: Transaction Model & CRUD (ES Modules)",
      "description": "Implement Transaction model, CRUD routes, validation, and tests. Add note: This is using ES Module not commonJS. Depends on backend structure and user/auth implementation.",
      "notes": "This is using ES Module not commonJS.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7ab8913d-ba85-4285-a033-b18bd5a4ccf3"
        },
        {
          "taskId": "e209d313-88e5-41fe-9041-f750acae4bbc"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.111Z",
      "updatedAt": "2025-06-19T11:07:12.430Z",
      "relatedFiles": [
        {
          "path": "backend/src/models/Transaction.ts",
          "type": "CREATE",
          "description": "Transaction model (Mongoose, ESM)"
        }
      ],
      "implementationGuide": "- Create Transaction model (Mongoose, ESM)\n- CRUD routes: get all, get one, create, update, delete\n- Stats endpoint\n- Input validation (Joi)\n- Auth middleware\n- Tests for all endpoints\n- Security: sanitize, validate, error handling\n- Add note: ES Modules only.",
      "verificationCriteria": "All transaction endpoints work, tests pass, ESM only."
    },
    {
      "id": "6d4d74ab-25a4-47b6-aa12-308b3a6327cf",
      "name": "Backend: Budget Model & CRUD (ES Modules)",
      "description": "Implement Budget model, CRUD routes, progress endpoint, validation, and tests. Add note: This is using ES Module not commonJS. Depends on backend structure and user/auth implementation.",
      "notes": "This is using ES Module not commonJS.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7ab8913d-ba85-4285-a033-b18bd5a4ccf3"
        },
        {
          "taskId": "e209d313-88e5-41fe-9041-f750acae4bbc"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.111Z",
      "updatedAt": "2025-06-19T11:07:16.897Z",
      "relatedFiles": [
        {
          "path": "backend/src/models/Budget.ts",
          "type": "CREATE",
          "description": "Budget model (Mongoose, ESM)"
        }
      ],
      "implementationGuide": "- Create Budget model (Mongoose, ESM)\n- CRUD routes: get all, create, update, delete\n- Progress endpoint\n- Input validation (Joi)\n- Auth middleware\n- Tests for all endpoints\n- Security: sanitize, validate, error handling\n- Add note: ES Modules only.",
      "verificationCriteria": "All budget endpoints work, tests pass, ESM only."
    },
    {
      "id": "a3f2b8eb-c2d0-44d9-8449-7f9a0e834165",
      "name": "Backend: Category Model & CRUD (ES Modules)",
      "description": "Implement Category model, CRUD routes, validation, and tests. Add note: This is using ES Module not commonJS. Depends on backend structure and user/auth implementation.",
      "notes": "This is using ES Module not commonJS.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7ab8913d-ba85-4285-a033-b18bd5a4ccf3"
        },
        {
          "taskId": "e209d313-88e5-41fe-9041-f750acae4bbc"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.111Z",
      "updatedAt": "2025-06-19T11:07:21.003Z",
      "relatedFiles": [
        {
          "path": "backend/src/models/Category.ts",
          "type": "CREATE",
          "description": "Category model (Mongoose, ESM)"
        }
      ],
      "implementationGuide": "- Create Category model (Mongoose, ESM)\n- CRUD routes: get all, create, update, delete\n- Input validation (Joi)\n- Auth middleware\n- Tests for all endpoints\n- Security: sanitize, validate, error handling\n- Add note: ES Modules only.",
      "verificationCriteria": "All category endpoints work, tests pass, ESM only."
    },
    {
      "id": "b16cd470-6f83-43b6-b940-e23551ffdbcd",
      "name": "Backend: Account Model & CRUD (ES Modules)",
      "description": "Implement Account model, CRUD routes, validation, and tests. Add note: This is using ES Module not commonJS. Depends on backend structure and user/auth implementation.",
      "notes": "This is using ES Module not commonJS.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7ab8913d-ba85-4285-a033-b18bd5a4ccf3"
        },
        {
          "taskId": "e209d313-88e5-41fe-9041-f750acae4bbc"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.111Z",
      "updatedAt": "2025-06-19T11:07:27.682Z",
      "relatedFiles": [
        {
          "path": "backend/src/models/Account.ts",
          "type": "CREATE",
          "description": "Account model (Mongoose, ESM)"
        }
      ],
      "implementationGuide": "- Create Account model (Mongoose, ESM)\n- CRUD routes: get all, create, update, delete\n- Input validation (Joi)\n- Auth middleware\n- Tests for all endpoints\n- Security: sanitize, validate, error handling\n- Add note: ES Modules only.",
      "verificationCriteria": "All account endpoints work, tests pass, ESM only."
    },
    {
      "id": "bc3895f5-54d5-4389-9f0b-2715cf3b85cc",
      "name": "Backend: Reports & Export (ES Modules)",
      "description": "Implement reports endpoints (summary, monthly, yearly, export), validation, and tests. Add note: This is using ES Module not commonJS. Depends on all model CRUD implementations.",
      "notes": "This is using ES Module not commonJS.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7ab8913d-ba85-4285-a033-b18bd5a4ccf3"
        },
        {
          "taskId": "e209d313-88e5-41fe-9041-f750acae4bbc"
        },
        {
          "taskId": "68d1c8fd-70f3-4b08-8a4c-8272c8c561d3"
        },
        {
          "taskId": "6d4d74ab-25a4-47b6-aa12-308b3a6327cf"
        },
        {
          "taskId": "a3f2b8eb-c2d0-44d9-8449-7f9a0e834165"
        },
        {
          "taskId": "b16cd470-6f83-43b6-b940-e23551ffdbcd"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.111Z",
      "updatedAt": "2025-06-19T11:07:36.155Z",
      "relatedFiles": [
        {
          "path": "backend/src/routes/reports.ts",
          "type": "CREATE",
          "description": "Reports route (ESM)"
        }
      ],
      "implementationGuide": "- Implement summary, monthly, yearly, export endpoints\n- Input validation (Joi)\n- Auth middleware\n- Tests for all endpoints\n- Security: sanitize, validate, error handling\n- Add note: ES Modules only.",
      "verificationCriteria": "All report endpoints work, tests pass, ESM only."
    },
    {
      "id": "b060ce87-839e-4fba-9cf5-10f5d91e6ec1",
      "name": "Backend: Recurring Transactions & Cron (ES Modules)",
      "description": "Implement recurring transaction logic and node-cron jobs. Add note: This is using ES Module not commonJS. Depends on Transaction model CRUD.",
      "notes": "This is using ES Module not commonJS.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "68d1c8fd-70f3-4b08-8a4c-8272c8c561d3"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.111Z",
      "updatedAt": "2025-06-19T11:07:45.857Z",
      "relatedFiles": [
        {
          "path": "backend/src/services/recurring.ts",
          "type": "CREATE",
          "description": "Recurring transaction service (ESM)"
        }
      ],
      "implementationGuide": "- Add recurring transaction fields to model\n- Implement cron job for recurring transactions\n- Tests for cron logic\n- Add note: ES Modules only.",
      "verificationCriteria": "Recurring logic and cron jobs work, tests pass, ESM only."
    },
    {
      "id": "f9b0a3e8-3d12-4255-ada0-ba063a825df0",
      "name": "Backend: Security & Middleware (ES Modules)",
      "description": "Implement security middleware: helmet, CORS, rate limiting, input sanitization, error handler. Add note: This is using ES Module not commonJS. Depends on backend structure.",
      "notes": "This is using ES Module not commonJS.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7ab8913d-ba85-4285-a033-b18bd5a4ccf3"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:07:50.824Z",
      "relatedFiles": [
        {
          "path": "backend/src/middleware/security.ts",
          "type": "CREATE",
          "description": "Security middleware (ESM)"
        }
      ],
      "implementationGuide": "- Add helmet, CORS, rate limiter\n- Input sanitization\n- Centralized error handler\n- Add note: ES Modules only.\n- Tests for security middleware.",
      "verificationCriteria": "All security middleware works, tests pass, ESM only."
    },
    {
      "id": "3c2da2be-ca6f-48f7-866e-2ebe5a70652a",
      "name": "Backend: Integration & E2E Tests (ES Modules)",
      "description": "Write integration and E2E tests for all backend routes and features. Add note: This is using ES Module not commonJS. Depends on all backend features and middleware.",
      "notes": "This is using ES Module not commonJS.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "e209d313-88e5-41fe-9041-f750acae4bbc"
        },
        {
          "taskId": "68d1c8fd-70f3-4b08-8a4c-8272c8c561d3"
        },
        {
          "taskId": "6d4d74ab-25a4-47b6-aa12-308b3a6327cf"
        },
        {
          "taskId": "a3f2b8eb-c2d0-44d9-8449-7f9a0e834165"
        },
        {
          "taskId": "b16cd470-6f83-43b6-b940-e23551ffdbcd"
        },
        {
          "taskId": "bc3895f5-54d5-4389-9f0b-2715cf3b85cc"
        },
        {
          "taskId": "b060ce87-839e-4fba-9cf5-10f5d91e6ec1"
        },
        {
          "taskId": "f9b0a3e8-3d12-4255-ada0-ba063a825df0"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:08:08.377Z",
      "relatedFiles": [
        {
          "path": "backend/tests/",
          "type": "TO_MODIFY",
          "description": "Backend integration and E2E tests (ESM)"
        }
      ],
      "implementationGuide": "- Use Jest or similar\n- Test all endpoints, models, and business logic\n- Add note: ES Modules only.",
      "verificationCriteria": "All tests pass, ESM only."
    },
    {
      "id": "269dd48a-08ea-41a9-81fa-de47882d227c",
      "name": "Frontend: Setup Project & API Service",
      "description": "Initialize React project, setup API service for backend usage, configure .env, and test connection. Depends on backend structure.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7ab8913d-ba85-4285-a033-b18bd5a4ccf3"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:08:42.481Z",
      "relatedFiles": [
        {
          "path": "frontend/src/services/api.ts",
          "type": "CREATE",
          "description": "API service for backend communication."
        }
      ],
      "implementationGuide": "- Create API service (Axios, TypeScript)\n- Configure .env for API URL\n- Test backend connection\n- Setup folder structure as per project guide.",
      "verificationCriteria": "API service works, backend reachable."
    },
    {
      "id": "fe338ebf-d41a-4539-8a6f-c37d13f6c99b",
      "name": "Frontend: Auth Pages & Context",
      "description": "Implement login, register, profile pages, and Auth context. Connect to backend endpoints. Depends on frontend API service and backend user/auth implementation.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "269dd48a-08ea-41a9-81fa-de47882d227c"
        },
        {
          "taskId": "e209d313-88e5-41fe-9041-f750acae4bbc"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:08:48.961Z",
      "relatedFiles": [
        {
          "path": "frontend/src/pages/Auth/",
          "type": "TO_MODIFY",
          "description": "Auth pages and context."
        }
      ],
      "implementationGuide": "- Create login, register, profile pages\n- Auth context (React Context + useReducer)\n- Connect to backend\n- Form validation (React Hook Form)\n- Error handling\n- Responsive design.",
      "verificationCriteria": "Auth pages and context work, backend integration complete."
    },
    {
      "id": "c476b72d-d2a3-40c0-b326-0ca214ef1fe1",
      "name": "Frontend: Transaction Pages & Context",
      "description": "Implement transaction list, details, create/edit forms, and Transaction context. Connect to backend endpoints. Depends on frontend API service and backend transaction CRUD.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "269dd48a-08ea-41a9-81fa-de47882d227c"
        },
        {
          "taskId": "68d1c8fd-70f3-4b08-8a4c-8272c8c561d3"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:08:53.811Z",
      "relatedFiles": [
        {
          "path": "frontend/src/pages/Transactions/",
          "type": "TO_MODIFY",
          "description": "Transaction pages and context."
        }
      ],
      "implementationGuide": "- Transaction list, details, create/edit forms\n- Transaction context (React Context + useReducer)\n- Connect to backend\n- Form validation\n- Responsive design.",
      "verificationCriteria": "Transaction pages and context work, backend integration complete."
    },
    {
      "id": "0bccca63-a212-40ea-96cc-11694bf5a3a9",
      "name": "Frontend: Budget Pages & Context",
      "description": "Implement budget list, details, create/edit forms, and Budget context. Connect to backend endpoints. Depends on frontend API service and backend budget CRUD.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "269dd48a-08ea-41a9-81fa-de47882d227c"
        },
        {
          "taskId": "6d4d74ab-25a4-47b6-aa12-308b3a6327cf"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:08:59.487Z",
      "relatedFiles": [
        {
          "path": "frontend/src/pages/Budgets/",
          "type": "TO_MODIFY",
          "description": "Budget pages and context."
        }
      ],
      "implementationGuide": "- Budget list, details, create/edit forms\n- Budget context (React Context + useReducer)\n- Connect to backend\n- Form validation\n- Responsive design.",
      "verificationCriteria": "Budget pages and context work, backend integration complete."
    },
    {
      "id": "195a6bb6-3e6b-489f-950c-37c1a336ea6e",
      "name": "Frontend: Category Pages & Context",
      "description": "Implement category list, details, create/edit forms, and Category context. Connect to backend endpoints. Depends on frontend API service and backend category CRUD.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "269dd48a-08ea-41a9-81fa-de47882d227c"
        },
        {
          "taskId": "a3f2b8eb-c2d0-44d9-8449-7f9a0e834165"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:09:05.386Z",
      "relatedFiles": [
        {
          "path": "frontend/src/pages/Categories/",
          "type": "TO_MODIFY",
          "description": "Category pages and context."
        }
      ],
      "implementationGuide": "- Category list, details, create/edit forms\n- Category context (React Context + useReducer)\n- Connect to backend\n- Form validation\n- Responsive design.",
      "verificationCriteria": "Category pages and context work, backend integration complete."
    },
    {
      "id": "19f5a87c-f660-4dcb-b0b5-daabb0ab92b4",
      "name": "Frontend: Account Pages & Context",
      "description": "Implement account list, details, create/edit forms, and Account context. Connect to backend endpoints. Depends on frontend API service and backend account CRUD.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "269dd48a-08ea-41a9-81fa-de47882d227c"
        },
        {
          "taskId": "b16cd470-6f83-43b6-b940-e23551ffdbcd"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:09:11.026Z",
      "relatedFiles": [
        {
          "path": "frontend/src/pages/Accounts/",
          "type": "TO_MODIFY",
          "description": "Account pages and context."
        }
      ],
      "implementationGuide": "- Account list, details, create/edit forms\n- Account context (React Context + useReducer)\n- Connect to backend\n- Form validation\n- Responsive design.",
      "verificationCriteria": "Account pages and context work, backend integration complete."
    },
    {
      "id": "35227b25-0546-4f17-bdf1-7ebbc42898e4",
      "name": "Frontend: Dashboard & Reports Pages",
      "description": "Implement dashboard, charts, and reports pages. Connect to backend endpoints. Depends on frontend API service and backend reports implementation.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "269dd48a-08ea-41a9-81fa-de47882d227c"
        },
        {
          "taskId": "bc3895f5-54d5-4389-9f0b-2715cf3b85cc"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:09:16.052Z",
      "relatedFiles": [
        {
          "path": "frontend/src/pages/Dashboard/",
          "type": "TO_MODIFY",
          "description": "Dashboard and reports pages."
        }
      ],
      "implementationGuide": "- Dashboard with charts (Chart.js)\n- Reports pages (summary, monthly, yearly, export)\n- Connect to backend\n- Responsive design\n- Accessibility.",
      "verificationCriteria": "Dashboard and reports pages work, backend integration complete."
    },
    {
      "id": "26396d4d-ab57-4021-9d71-59bf109faaf2",
      "name": "Frontend: Recurring Transactions UI",
      "description": "Implement UI for recurring transactions setup and management. Connect to backend endpoints. Depends on transaction UI and backend recurring logic.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "c476b72d-d2a3-40c0-b326-0ca214ef1fe1"
        },
        {
          "taskId": "b060ce87-839e-4fba-9cf5-10f5d91e6ec1"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:09:26.275Z",
      "relatedFiles": [
        {
          "path": "frontend/src/pages/Transactions/",
          "type": "TO_MODIFY",
          "description": "Recurring transaction UI."
        }
      ],
      "implementationGuide": "- Recurring transaction forms\n- Connect to backend\n- Responsive design.",
      "verificationCriteria": "Recurring transaction UI works, backend integration complete."
    },
    {
      "id": "2c6323eb-8136-45e3-a6f6-fb587a51decd",
      "name": "Frontend: Theme & Accessibility",
      "description": "Implement dark/light theme toggle and accessibility features. Depends on frontend setup.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "269dd48a-08ea-41a9-81fa-de47882d227c"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:09:34.561Z",
      "relatedFiles": [
        {
          "path": "frontend/src/contexts/ThemeContext.tsx",
          "type": "CREATE",
          "description": "Theme context and accessibility features."
        }
      ],
      "implementationGuide": "- Theme context\n- Toggle button\n- Accessibility (ARIA, keyboard nav, semantic HTML)\n- Responsive design.",
      "verificationCriteria": "Theme toggle and accessibility features work."
    },
    {
      "id": "da09906a-b494-4a0d-a8ce-e889363d9e72",
      "name": "Frontend: Integration & E2E Tests",
      "description": "Write integration and E2E tests for all frontend pages and features. Depends on all frontend features and UI.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "fe338ebf-d41a-4539-8a6f-c37d13f6c99b"
        },
        {
          "taskId": "c476b72d-d2a3-40c0-b326-0ca214ef1fe1"
        },
        {
          "taskId": "0bccca63-a212-40ea-96cc-11694bf5a3a9"
        },
        {
          "taskId": "195a6bb6-3e6b-489f-950c-37c1a336ea6e"
        },
        {
          "taskId": "19f5a87c-f660-4dcb-b0b5-daabb0ab92b4"
        },
        {
          "taskId": "35227b25-0546-4f17-bdf1-7ebbc42898e4"
        },
        {
          "taskId": "26396d4d-ab57-4021-9d71-59bf109faaf2"
        },
        {
          "taskId": "2c6323eb-8136-45e3-a6f6-fb587a51decd"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:09:41.170Z",
      "relatedFiles": [
        {
          "path": "frontend/src/__tests__/",
          "type": "TO_MODIFY",
          "description": "Frontend integration and E2E tests."
        }
      ],
      "implementationGuide": "- Use Jest, React Testing Library\n- Test all pages, components, and API integration.",
      "verificationCriteria": "All tests pass."
    },
    {
      "id": "45b69f1c-46dc-4c28-b46c-1825c3cba6c0",
      "name": "Postman: Auth Collection",
      "description": "Create Postman collection for all auth endpoints. Link with latest backend tasks. Depends on backend user/auth implementation.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "e209d313-88e5-41fe-9041-f750acae4bbc"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:09:46.187Z",
      "relatedFiles": [
        {
          "path": "tasks/Postman/Auth.postman_collection.json",
          "type": "CREATE",
          "description": "Postman collection for auth endpoints."
        }
      ],
      "implementationGuide": "- Add register, login, profile endpoints\n- Use latest backend routes\n- Export and document collection.",
      "verificationCriteria": "All auth endpoints covered in Postman."
    },
    {
      "id": "549440ce-ca7e-417c-a9f7-7ff348a07d65",
      "name": "Postman: Transaction Collection",
      "description": "Create Postman collection for all transaction endpoints. Link with latest backend tasks. Depends on backend transaction CRUD.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "68d1c8fd-70f3-4b08-8a4c-8272c8c561d3"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:09:54.858Z",
      "relatedFiles": [
        {
          "path": "tasks/Postman/Transaction.postman_collection.json",
          "type": "CREATE",
          "description": "Postman collection for transaction endpoints."
        }
      ],
      "implementationGuide": "- Add all transaction endpoints\n- Use latest backend routes\n- Export and document collection.",
      "verificationCriteria": "All transaction endpoints covered in Postman."
    },
    {
      "id": "6ed99469-28f8-4b9f-80bb-2b5f45947953",
      "name": "Postman: Budget Collection",
      "description": "Create Postman collection for all budget endpoints. Link with latest backend tasks. Depends on backend budget CRUD.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "6d4d74ab-25a4-47b6-aa12-308b3a6327cf"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:10:05.319Z",
      "relatedFiles": [
        {
          "path": "tasks/Postman/Budget.postman_collection.json",
          "type": "CREATE",
          "description": "Postman collection for budget endpoints."
        }
      ],
      "implementationGuide": "- Add all budget endpoints\n- Use latest backend routes\n- Export and document collection.",
      "verificationCriteria": "All budget endpoints covered in Postman."
    },
    {
      "id": "8ec788fa-3226-4e99-a190-56b84c4b2bc5",
      "name": "Postman: Category Collection",
      "description": "Create Postman collection for all category endpoints. Link with latest backend tasks. Depends on backend category CRUD.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "a3f2b8eb-c2d0-44d9-8449-7f9a0e834165"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:10:15.503Z",
      "relatedFiles": [
        {
          "path": "tasks/Postman/Category.postman_collection.json",
          "type": "CREATE",
          "description": "Postman collection for category endpoints."
        }
      ],
      "implementationGuide": "- Add all category endpoints\n- Use latest backend routes\n- Export and document collection.",
      "verificationCriteria": "All category endpoints covered in Postman."
    },
    {
      "id": "a5c5faeb-1cc0-421d-a928-f682127ddf36",
      "name": "Postman: Account Collection",
      "description": "Create Postman collection for all account endpoints. Link with latest backend tasks. Depends on backend account CRUD.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "b16cd470-6f83-43b6-b940-e23551ffdbcd"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:10:20.791Z",
      "relatedFiles": [
        {
          "path": "tasks/Postman/Account.postman_collection.json",
          "type": "CREATE",
          "description": "Postman collection for account endpoints."
        }
      ],
      "implementationGuide": "- Add all account endpoints\n- Use latest backend routes\n- Export and document collection.",
      "verificationCriteria": "All account endpoints covered in Postman."
    },
    {
      "id": "f2cf8f7e-3955-48c6-844c-1cc28a6c7179",
      "name": "Postman: Reports Collection",
      "description": "Create Postman collection for all reports endpoints. Link with latest backend tasks. Depends on backend reports implementation.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "bc3895f5-54d5-4389-9f0b-2715cf3b85cc"
        }
      ],
      "createdAt": "2025-06-19T11:06:10.112Z",
      "updatedAt": "2025-06-19T11:10:27.609Z",
      "relatedFiles": [
        {
          "path": "tasks/Postman/Reports.postman_collection.json",
          "type": "CREATE",
          "description": "Postman collection for reports endpoints."
        }
      ],
      "implementationGuide": "- Add all reports endpoints\n- Use latest backend routes\n- Export and document collection.",
      "verificationCriteria": "All reports endpoints covered in Postman."
    }
  ]
}